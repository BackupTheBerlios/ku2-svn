#
#	SConstruct file for Kane Utilities 2
#
#	Fri Apr  7 17:16:57 2006
#		J. Anton, Copyright 2006
#

env = Environment(CPPPATH=".")

if env["PLATFORM"] == "win32":
	env.Append(CCFLAGS = ["/W3", "/MD", "/Wp64"], CPPDEFINES = ["_CRT_SECURE_NO_DEPRECATE", "WIN32"])
	debug_ccflags = ["/ZI"]
	release_ccflags = ["/O2"]
	release_linkflags = [""]
elif env["PLATFORM"] == "posix":
	env.Allend(CCFLAGS = ["-Wall"])
	debug_ccflags = ["-g"]
	release_ccflags = ["-O2"]
	release_linkflags = ["-s"]
else:
	print "Unsupported platform: " + env["PLATFORM"]
	Exit()

conf = Configure(env)
if not conf.CheckCHeader("ctype.h"):
	Exit()	
if not conf.CheckCHeader("errno.h"):
	Exit()
if not conf.CheckCHeader("libintl.h"):
	env.Append(CPPDEFINES = ["NO_LIBINTL_H"])
if not conf.CheckCHeader("stdarg.h"):
	Exit()
if not conf.CheckCHeader("stdint.h"):
	env.Append(CPPDEFINES = ["NO_STDINT_H"])
	if not conf.CheckCHeader("inttypes.h"):
		env.Append(CPPDEFINES = ["NO_INTTYPES_H"])
if not conf.CheckCHeader("stdio.h"):
	Exit()
if not conf.CheckCHeader("stdlib.h"):
	Exit()
if not conf.CheckCHeader("string.h"):
	Exit()
if not conf.CheckCHeader("time.h"):
	Exit()
env = conf.Finish()

mode = ARGUMENTS.get("mode", "debug")
if mode == "debug":
	env.Append(CCFLAGS = debug_ccflags, CPPDEFINES = ["DEBUG"])
	debug = ARGUMENTS.get("debug", "memory,func,log")
	if "memory" in debug:
		env.Append(CPPDEFINES = ["DEBUG_MEMORY"])
	if "func" in debug:
		env.Append(CPPDEFINES = ["DEBUG_FUNC"])
	if "log" in debug:
		env.Append(CPPDEFINES = ["DEBUG_LOG"])
elif mode == "release":
	env.Append(CCFLAGS = release_ccflags)
	env.Append(LINKFLAGS = release_linkflags)
	debug = ""
else:
	print "Invalid mode ( debug|release )"
	Exit()

use = ARGUMENTS.get("use", "gettext")
if "gettext" in use:
	env.Append(CPPDEFINES = ["USE_GETTEXT"])

sources = Split("""
	ku2/ku2.c
	log/log.c
	other/other.c
	list/dl_list.c
	abtree/abtree.c
	cfgreader/cfg.c
	""")

ku2lib = env.Library("ku2", sources)

Default(ku2lib)
