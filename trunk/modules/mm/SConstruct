#
#	SConstruct file for Kane Utilities 2 (multimedia)
#		J. Anton, Copyright 2006+
#

import os

###
#	Initialisation
##
env = Environment(CPPPATH = ["."], CPPDEFINES = ["MM_BACKEND=SDL"])

###
#	System settings
##
sysset = ARGUMENTS.get("system", "auto")

###
#	Platform depended variables and actions
###
if env["PLATFORM"] == "win32" and (sysset == "vc" or sysset == "auto"):
	env.Append(CCFLAGS = ["/W3", "/MD", "/Wp64"], \
		CPPDEFINES = ["_CRT_SECURE_NO_DEPRECATE", "WIN32", "VCPP"])
		#LINKFLAGS = ["/SUBSYSTEM:WINDOWS"])
	debug_ccflags = ["/ZI"]
	release_ccflags = ["/O2"]
	release_linkflags = []
	sdl_includes = ["C:\Devel\Microsoft Visual Studio 8\VC\include\SDL"]
elif env["PLATFORM"] == "win32" and sysset == "mingw":
	env.Tool("mingw")
	env.Append(CCFLAGS = ["-Wall", "-Wextra", "-Werror-implicit-function-declaration"],
		CPPDEFINES = ["POSIX", "_REENTRANT", "_GNU_SOURCE"])
	debug_ccflags = ["-g"]
	release_ccflags = ["-O2"]
	release_linkflags = ["-s"]
	sdl_includes = ["C:\Devel\MSYS\mingw\include\SDL"]
elif env["PLATFORM"] == "posix" and sysset == "auto":
	env.Append(CCFLAGS = ["-Wall", "-Wextra", "-Werror-implicit-function-declaration"],
		CPPDEFINES = ["POSIX", "_REENTRANT", "_GNU_SOURCE"],
		CPPPATH = ["/usr/include/SDL"])
	debug_ccflags = ["-g"]
	release_ccflags = ["-O2"]
	release_linkflags = ["-s"]
else:
	print "Unsupported platform: " + env["PLATFORM"] + " (" + sysset + ")"
	Exit()

###
#	Checking header files
###
conf = Configure(env)
if not conf.CheckCHeader("ctype.h"):
	Exit()
if not conf.CheckCHeader("errno.h"):
	Exit()
if not conf.CheckCHeader("libintl.h"):
	env.Append(CPPDEFINES = ["NO_LIBINTL_H"])
if not conf.CheckCHeader("limits.h"):
	Exit()
if not conf.CheckCHeader("stdarg.h"):
	Exit()
if not conf.CheckCHeader("stdint.h"):
	env.Append(CPPDEFINES = ["NO_STDINT_H"])
	if not conf.CheckCHeader("inttypes.h"):
		env.Append(CPPDEFINES = ["NO_INTTYPES_H"])
if not conf.CheckCHeader("stdio.h"):
	Exit()
if not conf.CheckCHeader("stdlib.h"):
	Exit()
if not conf.CheckCHeader("string.h"):
	Exit()
if not conf.CheckCHeader("sys/timeb.h"):
	Exit()
if not conf.CheckCHeader("time.h"):
	Exit()

#	Headers for OPENGL module:
if not conf.CheckCHeader("nvidia/GL/gl.h"):
	env.Append(CPPDEFINES = ["NO_NVIDIA_GL_H"])
	if not conf.CheckCHeader("GL/gl.h"):
		env.Append(CPPDEFINES = ["NO_GL_H"])
env = conf.Finish()

###
#	Getting building mode
#	Possible modes:
#		debug - build with debugging
#		release - build with optimisations and witout debuggin
###
mode = ARGUMENTS.get("mode", "debug")
if mode == "debug":
	env.Append(CCFLAGS = debug_ccflags, CPPDEFINES = ["DEBUG"])
	debug = ARGUMENTS.get("debug", "memory,log")
	if "memory" in debug:
		env.Append(CPPDEFINES = ["DEBUG_MEMORY"])
	if "log" in debug:
		env.Append(CPPDEFINES = ["DEBUG_LOG"])
elif mode == "release":
	env.Append(CCFLAGS = release_ccflags)
	env.Append(LINKFLAGS = release_linkflags)
	debug = ""
else:
	print "Invalid mode ( debug|release )"
	Exit()

###
#	Getting list of add-ons to build with.
#	Possible add-ons:
#		gettext - use libintl support
###
enable = ARGUMENTS.get("enable", "")
disable = ARGUMENTS.get("disable", "")
if "gettext" in enable and not "gettext" in disable:
	env.Append(CPPDEFINES = ["USE_GETTEXT"])

###
#	Module externa, requests (including KU2 core)
###
env.ParseConfig("pkg-config --cflags --libs ku2")

###
#	Getting the install root and prefix
###
install_root = ARGUMENTS.get("root", "/")
install_prefix = ARGUMENTS.get("prefix", "/usr/")

###
#	Kane Utilities 2 SDL/OpenGL GUI and multimedia module sources and includes
###
sources = Split("""
	gfx/gfx.c
	gfx/image.c
	gfx/font.c
	gui/gui.c
	widgets/frame.c
	widgets/button.c
	widgets/texed.c
	widgets/textline.c
	""")

includes = Split("""
	ku2mm.h
	gui/gui.h
	gfx/font.h
	gfx/image.h
	widgets/button.h
	widgets/frame.h
	widgets/textline.h
	widgets/texed.h
	""")

###
#	Building and Installing
###
ku2mm = env.Library("ku2mm", sources)

env.Alias("install", install_root+install_prefix)
env.Install(install_root+install_prefix+"/lib/", ku2mm)
env.Install(install_root+install_prefix+"/lib/pkgconfig/", File("ku2mm.pc"))
for c_inc in includes:
	c_inc_f = File(c_inc)
	env.Install(install_root+install_prefix+"/include/ku2/mm/"+os.path.dirname(c_inc_f.path), c_inc_f)

Default(ku2mm)
